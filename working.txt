from flask import Flask, render_template, request, flash, url_for, redirect
from flask_sqlalchemy import SQLAlchemy
from wtforms import StringField, PasswordField, SubmitField,validators
from wtforms.validators import DataRequired, Email
from flask_wtf import FlaskForm

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///students.db'
app.config['SECRET_KEY'] = "random string"

db = SQLAlchemy(app)

class Student(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    city = db.Column(db.String(50), nullable=False)
    addr = db.Column(db.String(200), nullable=False)
    pin = db.Column(db.String(10), nullable=False)

    def __repr__(self):
        return f"<Student {self.name}>"

class StudentForm(FlaskForm):
    name = StringField('Name', validators=[validators.DataRequired()])
    city = StringField('City', validators=[validators.DataRequired()])
    addr = StringField('Address', validators=[validators.DataRequired()])
    pin = StringField('PIN', validators=[validators.DataRequired(), validators.Length(min=4, max=10)])  # Add length validation

    submit = SubmitField('Submit')

@app.route('/')
def show_all():
    students = Student.query.all()
    return render_template('show_all.html', students=students)

@app.route('/new', methods=['GET', 'POST'])
def new():
    form = StudentForm()  # Create a form instance
    if form.validate_on_submit():  # Check if form data is valid
        student = Student(name=form.name.data,
                          city=form.city.data,
                          addr=form.addr.data,
                          pin=form.pin.data)
        db.session.add(student)
        db.session.commit()
        flash('Record was successfully added')
        return redirect(url_for('show_all'))

    return render_template('new.html', form=form)

with app.app_context():
    db.create_all()


if __name__ == '__main__':
    app.run(debug=True)